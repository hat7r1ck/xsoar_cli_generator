<div class="tab-container">
    <button class="tab-button" onclick="showTab('case-cli')">Case CLI</button>
    <button class="tab-button" onclick="showTab('case-flood')">Case Flood CLI</button>
    <button class="tab-button" onclick="showTab('case-notes')">Case Notes</button>
    <button class="tab-button" onclick="showTab('links-library')">Links Library</button>
    <button class="tab-button" onclick="showTab('readme')">ReadMe</button>
</div>

<div id="links-library" class="tab-content">
    <h2>Links Library</h2>

    <h3>Static Links</h3>
    <ul id="static-links">
        <li><a href="https://virustotal.com" target="_blank">VirusTotal</a></li>
        <li><a href="https://whois.domaintools.com/" target="_blank">WHOIS Lookup</a></li>
        <li><a href="https://www.abuseipdb.com/" target="_blank">AbuseIPDB</a></li>
    </ul>

    <h3>Dynamic Links</h3>
    <ul id="dynamic-links">
        <li>
            <a id="iplookup-link" href="#" target="_blank" class="disabled-link">IP Lookup</a>
        </li>
        <li>
            <a id="hostlookup-link" href="#" target="_blank" class="disabled-link">Hostname Lookup</a>
        </li>
        <li>
            <a id="cloudresource-link" href="#" target="_blank" class="disabled-link">Cloud Resource Lookup</a>
        </li>
    </ul>
</div>

.disabled-link {
    color: gray;
    pointer-events: none;
    text-decoration: line-through;
}

.active-link {
    color: var(--theme-color);
    pointer-events: auto;
    text-decoration: none;
}
.input-row {
    display: flex;
    align-items: center;
    gap: 10px;
    justify-content: space-between;
}

.input-row label {
    white-space: nowrap;
    font-weight: bold;
}

.input-row input {
    flex: 1;
    min-width: 120px;
    padding: 5px;
    background-color: black;
    color: var(--theme-color);
    border: 2px solid var(--theme-color);
}
.input-row {
    display: flex;
    gap: 10px; /* Adds space between input fields */
    flex-wrap: wrap; /* Prevents overflow issues */
    align-items: flex-start; /* Aligns everything to the top */
    justify-content: flex-start; /* Aligns fields to the left */
    width: 100%;
}

.input-row label {
    display: block;
    font-weight: bold;
    font-size: 14px;
    margin-bottom: 3px; /* Ensures spacing between label and input */
}

.input-row .field-container {
    display: flex;
    flex-direction: column; /* Stack label above input */
    flex: 1; /* Allows fields to resize properly */
    min-width: 150px; /* Prevents fields from getting too small */
}



document.addEventListener("DOMContentLoaded", function () {
    updateDynamicLinks();
});

function updateDynamicLinks() {
    let ip = document.getElementById("ip-address").value.trim();
    let host = document.getElementById("hostname").value.trim();
    let cloud = document.getElementById("cloud-resource").value.trim();

    setLink("iplookup-link", `https://whois.domaintools.com/${ip}`, ip);
    setLink("hostlookup-link", `https://dnslookup.com/${host}`, host);
    setLink("cloudresource-link", `https://cloudlookup.com/${cloud}`, cloud);
}

function setLink(elementId, url, condition) {
    let link = document.getElementById(elementId);
    if (condition) {
        link.href = url;
        link.classList.remove("disabled-link");
        link.classList.add("active-link");
    } else {
        link.href = "#";
        link.classList.add("disabled-link");
        link.classList.remove("active-link");
    }
}

document.querySelectorAll("#case-notes input").forEach(input => {
    input.addEventListener("input", updateDynamicLinks);
});

<div class="input-row">
    <div class="field-container">
        <label for="hostname">Hostname</label>
        <input type="text" id="hostname" placeholder="Enter hostname">
    </div>

    <div class="field-container">
        <label for="ip-address">IP Address</label>
        <input type="text" id="ip-address" placeholder="Enter IP address">
    </div>

    <div class="field-container">
        <label for="cloud-resource">Cloud Resource</label>
        <input type="text" id="cloud-resource" placeholder="Enter resource">
    </div>
</div>



function generateCaseNotes() {
    let hostname = document.getElementById("hostname").value.trim();
    let ipAddress = document.getElementById("ip-address").value.trim();
    let cloudResource = document.getElementById("cloud-resource").value.trim();

    // Collect non-empty values with labels
    let entities = [];
    if (hostname) entities.push(`host **${hostname}**`);
    if (ipAddress) entities.push(`IP **${ipAddress}**`);
    if (cloudResource) entities.push(`resource **${cloudResource}**`);

    // Determine how to phrase it correctly
    let entityString;
    if (entities.length === 1) {
        entityString = entities[0];  // "on host X"
    } else if (entities.length === 2) {
        entityString = `${entities[0]} and ${entities[1]}`;  // "on host X and IP Y"
    } else if (entities.length === 3) {
        entityString = `${entities[0]}, ${entities[1]}, and ${entities[2]}`;  // "on host X, IP Y, and resource Z"
    } else {
        entityString = "an unknown entity";  // If all fields are empty
    }

    // Other case note values
    let date = new Date().toLocaleDateString("en-US");  // Get today's date
    let detectionName = document.getElementById("detection-name").value.trim() || "an unspecified detection";

    // Construct the final case notes output
    let caseNotes = `On ${date}, the CTFC observed an XSOAR case for the user seen generating **${detectionName}** on ${entityString}.\n\nFurther investigation is ongoing.`;

    // Output to the textarea
    document.getElementById("case-notes-output").value = caseNotes;
}
