<div class="tab-container">
    <button class="tab-button" onclick="showTab('readme')">ReadMe</button> <!-- NEW TAB -->
</div>

<div id="readme" class="tab-content">
    <h2>Instructions & Customization</h2>
    <p>Welcome to XSOAR Case Tools! Use this tab to customize your experience.</p>

    <h3>Theme Color Picker</h3>
    <div class="theme-picker-container">
        <label for="theme-color">Choose Theme: </label>
        <select id="theme-color">
            <option value="#00ff00" selected>Green (Default)</option>
            <option value="#ff0000">Red</option>
            <option value="#00aaff">Blue</option>
            <option value="#ff9900">Orange</option>
            <option value="#ffffff">White</option>
            <option value="custom">Custom...</option>
        </select>
        
        <input type="text" id="custom-color" placeholder="Enter Hex Code" style="display:none;">
    </div>
</div>

.theme-picker-container {
    margin-top: 10px;
    padding: 10px;
    border: 2px solid var(--theme-color);
    text-align: center;
    background-color: #111;
    box-shadow: 0 0 10px var(--theme-color);
}

#custom-color {
    margin-top: 5px;
    padding: 8px;
    width: 150px;
    text-align: center;
    border: 2px solid var(--theme-color);
    background-color: black;
    color: var(--theme-color);
}


document.addEventListener("DOMContentLoaded", function () {
    const themePicker = document.getElementById("theme-color");
    const customColorInput = document.getElementById("custom-color");

    // Load saved theme
    const savedTheme = localStorage.getItem("selectedTheme");
    if (savedTheme) {
        document.documentElement.style.setProperty("--theme-color", savedTheme);
        themePicker.value = savedTheme.startsWith("#") ? savedTheme : "custom";
        if (savedTheme.startsWith("#")) {
            customColorInput.value = savedTheme;
            customColorInput.style.display = "inline-block";
        }
    }

    themePicker.addEventListener("change", function () {
        if (themePicker.value === "custom") {
            customColorInput.style.display = "inline-block";
        } else {
            customColorInput.style.display = "none";
            document.documentElement.style.setProperty("--theme-color", themePicker.value);
            localStorage.setItem("selectedTheme", themePicker.value);
        }
    });

    customColorInput.addEventListener("input", function () {
        const customColor = customColorInput.value;
        if (/^#[0-9A-F]{6}$/i.test(customColor)) { // Validate hex format
            document.documentElement.style.setProperty("--theme-color", customColor);
            localStorage.setItem("selectedTheme", customColor);
        }
    });
});


document.addEventListener("DOMContentLoaded", function () {
    const themePicker = document.getElementById("theme-color");
    const customColorInput = document.getElementById("custom-color");

    // Hide the custom color input at start
    customColorInput.style.display = "none";

    // Load saved theme
    const savedTheme = localStorage.getItem("selectedTheme");
    if (savedTheme) {
        document.documentElement.style.setProperty("--theme-color", savedTheme);
        themePicker.value = savedTheme.startsWith("#") ? savedTheme : "custom";
        if (savedTheme.startsWith("#")) {
            customColorInput.value = savedTheme;
            customColorInput.style.display = "inline-block"; // Only show if custom
        }
    }

    themePicker.addEventListener("change", function () {
        if (themePicker.value === "custom") {
            customColorInput.style.display = "inline-block";
        } else {
            customColorInput.style.display = "none";
            document.documentElement.style.setProperty("--theme-color", themePicker.value);
            localStorage.setItem("selectedTheme", themePicker.value);
        }
    });

    customColorInput.addEventListener("input", function () {
        const customColor = customColorInput.value;
        if (/^#[0-9A-F]{6}$/i.test(customColor)) { // Validate hex format
            document.documentElement.style.setProperty("--theme-color", customColor);
            localStorage.setItem("selectedTheme", customColor);
        }
    });
});

function drawMatrix() {
    ctx.fillStyle = "rgba(0, 0, 0, 0.05)";
    ctx.fillRect(0, 0, canvas.width, canvas.height);

    // Get the currently selected theme color
    let themeColor = getComputedStyle(document.documentElement)
        .getPropertyValue("--theme-color").trim() || "#00ff00";

    ctx.fillStyle = themeColor; // Set text to match user theme
    ctx.font = `${fontSize}px Courier New`;

    drops.forEach((y, index) => {
        const text = matrix[Math.floor(Math.random() * matrix.length)];
        const x = index * fontSize;
        ctx.fillText(text, x, y * fontSize);

        if (y * fontSize > canvas.height && Math.random() > 0.975) {
            drops[index] = 0;
        }
        drops[index]++;
    });
}


document.addEventListener("DOMContentLoaded", function () {
    const themePicker = document.getElementById("theme-color");
    const customColorInput = document.getElementById("custom-color");

    // **Ensure it's completely hidden on page load**
    customColorInput.style.display = "none"; 

    // Load saved theme
    const savedTheme = localStorage.getItem("selectedTheme");
    if (savedTheme) {
        document.documentElement.style.setProperty("--theme-color", savedTheme);
        themePicker.value = savedTheme.startsWith("#") ? savedTheme : "custom";
        
        // **ONLY show if "custom" was previously selected**
        if (themePicker.value === "custom") {
            customColorInput.style.display = "inline-block";
        }
    }

    themePicker.addEventListener("change", function () {
        if (themePicker.value === "custom") {
            customColorInput.style.display = "inline-block";
            customColorInput.focus(); // Focus on the input box for easy access
        } else {
            customColorInput.style.display = "none";
            document.documentElement.style.setProperty("--theme-color", themePicker.value);
            localStorage.setItem("selectedTheme", themePicker.value);
        }
    });

    customColorInput.addEventListener("input", function () {
        const customColor = customColorInput.value;
        if (/^#[0-9A-F]{6}$/i.test(customColor)) { // Validate hex format
            document.documentElement.style.setProperty("--theme-color", customColor);
            localStorage.setItem("selectedTheme", customColor);
        }
    });
});
