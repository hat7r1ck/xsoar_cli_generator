.header-container {
  display: flex;
  justify-content: space-between;
  align-items: center;
  /* Optional styling */
  padding: 10px;
  border-bottom: 2px solid var(--ctp-overlay1);
}

.tabs-container {
  display: flex;
  gap: 10px;
  flex: 1;
  justify-content: center; /* Centers tabs */
}

.hamburger-container {
  /* This container will stay at the right side */
  position: relative; /* To position dropdown relative to it */
}

#hamburger-button {
  background: transparent;
  border: none;
  color: var(--ctp-text);
  font-size: 1.5em;
  cursor: pointer;
}

#menu-dropdown {
  display: none;
  position: absolute;
  top: 100%;
  right: 0;
  background-color: var(--ctp-mantle);
  border: 2px solid var(--theme-accent);
  border-radius: 4px;
  padding: 10px;
  margin-top: 5px;
  min-width: 200px;
  z-index: 1000;
}

<div class="header-container">
  <div class="tabs-container">
    <button class="tab-button">Tab 1</button>
    <button class="tab-button">Tab 2</button>
    <button class="tab-button">Tab 3</button>
  </div>
  <div class="hamburger-container">
    <button id="hamburger-button">&#9776;</button>
    <div id="menu-dropdown">
      <!-- Dropdown content here -->
    </div>
  </div>
</div>


function updateFavicon(accentColor) {
  // Create an SVG string that uses the accent color in the circle fill.
  const svg = `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100">
    <circle cx="50" cy="50" r="40" fill="${encodeURIComponent(accentColor)}"/>
  </svg>`;
  // Create a data URI
  const dataUri = `data:image/svg+xml,${svg}`;
  // Find or create the favicon link element
  let favicon = document.querySelector('link[rel="icon"]');
  if (!favicon) {
    favicon = document.createElement('link');
    favicon.setAttribute('rel', 'icon');
    document.head.appendChild(favicon);
  }
  // Update the favicon href
  favicon.setAttribute('href', dataUri);
}


function setAccent(accentOrHex) {
  const theme = document.documentElement.getAttribute("data-theme");
  let computedColor;
  if (accentOrHex.startsWith("#")) {
    computedColor = accentOrHex;
  } else {
    const varName = `--ctp-${accentOrHex}`;
    computedColor = getComputedStyle(document.documentElement).getPropertyValue(varName).trim() || accentOrHex;
  }
  if (theme === "matrix") {
    document.documentElement.style.setProperty("--text-color", computedColor);
    document.documentElement.style.setProperty("--border-color", computedColor);
  } else {
    document.documentElement.style.setProperty("--theme-accent", `var(--ctp-${accentOrHex})`);
  }
  matrixColor = computedColor;
  // Update the favicon with the new computed color
  updateFavicon(computedColor);
}


