.header-container {
  display: flex;
  justify-content: space-between;
  align-items: center;
  /* Optional styling */
  padding: 10px;
  border-bottom: 2px solid var(--ctp-overlay1);
}

.tabs-container {
  display: flex;
  gap: 10px;
  flex: 1;
  justify-content: center; /* Centers tabs */
}

.hamburger-container {
  /* This container will stay at the right side */
  position: relative; /* To position dropdown relative to it */
}

#hamburger-button {
  background: transparent;
  border: none;
  color: var(--ctp-text);
  font-size: 1.5em;
  cursor: pointer;
}

#menu-dropdown {
  display: none;
  position: absolute;
  top: 100%;
  right: 0;
  background-color: var(--ctp-mantle);
  border: 2px solid var(--theme-accent);
  border-radius: 4px;
  padding: 10px;
  margin-top: 5px;
  min-width: 200px;
  z-index: 1000;
}

<div class="header-container">
  <div class="tabs-container">
    <button class="tab-button">Tab 1</button>
    <button class="tab-button">Tab 2</button>
    <button class="tab-button">Tab 3</button>
  </div>
  <div class="hamburger-container">
    <button id="hamburger-button">&#9776;</button>
    <div id="menu-dropdown">
      <!-- Dropdown content here -->
    </div>
  </div>
</div>


<link rel="icon" href="data:image/svg+xml,<svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 100 100%22><text y=%22.9em%22 font-size=%2290%22>üõ†Ô∏è</text></svg>">


<div id="menu-dropdown">
  <!-- Existing theme and accent controls -->
  <div>
    <label for="theme-picker">Theme:</label>
    <select id="theme-picker">
      <option value="matrix">Matrix</option>
      <option value="mocha">Catppuccin Mocha</option>
      <option value="latte">Catppuccin Latte</option>
    </select>
  </div>
  <div style="margin-top: 10px;">
    <label for="accent-picker">Accent:</label>
    <select id="accent-picker">
      <!-- options here -->
    </select>
  </div>
  <!-- Optional custom hex input -->
  <div id="custom-hex-container" style="display: none; margin-top: 10px;">
    <label for="custom-hex">Custom Hex (#RRGGBB):</label>
    <input type="text" id="custom-hex" placeholder="#RRGGBB">
  </div>
  
  <!-- Moved matrix toggle -->
  <div style="margin-top: 10px; display: flex; align-items: center; gap: 5px;">
    <span id="pill-status" style="font-size: 0.9em; color: var(--ctp-text);">Blue Pill</span>
    <label class="matrix-switch" style="display: inline-flex; align-items: center;">
      <input type="checkbox" id="toggle-matrix">
      <span class="matrix-slider square" style="width: 40px; height: 20px;"></span>
    </label>
  </div>
</div>

@keyframes pulse {
  0% {
    box-shadow: 0 0 0 0 rgba(137, 180, 250, 0.7);
  }
  70% {
    box-shadow: 0 0 0 10px rgba(137, 180, 250, 0);
  }
  100% {
    box-shadow: 0 0 0 0 rgba(137, 180, 250, 0);
  }
}

.matrix-toggle-section.highlight {
  animation: pulse 1s ease-out;
}

const hamburgerButton = document.getElementById("hamburger-button");
const menuDropdown = document.getElementById("menu-dropdown");
const matrixToggleSection = document.querySelector(".matrix-toggle-section");

hamburgerButton.addEventListener("click", (e) => {
  // Toggle the dropdown
  if (menuDropdown.style.display === "none" || menuDropdown.style.display === "") {
    menuDropdown.style.display = "block";
    // Add the pulse effect to draw attention to the toggle
    matrixToggleSection.classList.add("highlight");
    // Optionally remove the highlight after the animation completes (1s)
    setTimeout(() => {
      matrixToggleSection.classList.remove("highlight");
    }, 1000);
  } else {
    menuDropdown.style.display = "none";
  }
  e.stopPropagation();
});
