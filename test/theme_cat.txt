/* ===============================
   Catppuccin Mocha Theme (v1)
   Fully compliant with official style guide
   Can coexist with Matrix by toggling data-theme="mocha"
   =============================== */

:root[data-theme='mocha'] {
  /* Base Colors */
  --ctp-base: #1e1e2e;
  --ctp-mantle: #181825;
  --ctp-crust: #11111b;

  /* Surface Layers */
  --ctp-surface0: #313244;
  --ctp-surface1: #45475a;
  --ctp-surface2: #585b70;

  /* Overlays */
  --ctp-overlay0: #6c7086;
  --ctp-overlay1: #7f849c;
  --ctp-overlay2: #9399b2;

  /* Subtext & Text */
  --ctp-subtext0: #a6adc8;
  --ctp-subtext1: #bac2de;
  --ctp-text: #cdd6f4;

  /* Colors */
  --ctp-lavender: #b4befe;
  --ctp-blue: #89b4fa;
  --ctp-sapphire: #74c7ec;
  --ctp-sky: #89dceb;
  --ctp-teal: #94e2d5;
  --ctp-green: #a6e3a1;
  --ctp-yellow: #f9e2af;
  --ctp-peach: #fab387;
  --ctp-maroon: #eba0ac;
  --ctp-red: #f38ba8;
  --ctp-mauve: #cba6f7;
  --ctp-pink: #f5c2e7;
  --ctp-flamingo: #f2cdcd;
  --ctp-rosewater: #f5e0dc;
}

/* === Example Component Usage === */
body[data-theme='mocha'] {
  background-color: var(--ctp-base);
  color: var(--ctp-text);
  font-family: system-ui, sans-serif;
  transition: background-color 0.3s, color 0.3s;
}

button,
input,
select,
textarea {
  background-color: var(--ctp-surface0);
  color: var(--ctp-text);
  border: 1px solid var(--ctp-surface2);
  padding: 0.5rem 1rem;
  border-radius: 6px;
  transition: background-color 0.2s, color 0.2s;
}

button:hover,
input:hover,
select:hover,
textarea:hover {
  background-color: var(--ctp-surface1);
  border-color: var(--ctp-overlay1);
}

h1, h2, h3, h4, h5, h6 {
  color: var(--ctp-subtext1);
}

a {
  color: var(--ctp-blue);
  text-decoration: underline;
}

a:hover {
  color: var(--ctp-lavender);
}

.code-block,
pre, code {
  background-color: var(--ctp-surface1);
  color: var(--ctp-mauve);
  border: 1px solid var(--ctp-surface2);
  padding: 0.5rem;
  border-radius: 4px;
}

/* Optional: Matrix overlay support */
body[data-theme='mocha']::before {
  content: '';
  position: fixed;
  inset: 0;
  background: url('/path/to/matrix-bg.gif') center/cover no-repeat;
  opacity: 0.05;
  z-index: 0;
  pointer-events: none;
}

/* Ensure content stays above background */
body[data-theme='mocha'] * {
  position: relative;
  z-index: 1;
}

/* === Add more overrides below as needed === */
/* You can safely start replacing old styles by mapping them to new Catppuccin variables */



/* Default mapping */
:root[data-theme="mocha"] {
  --theme-color: var(--ctp-mocha-blue); /* or mauve, teal, etc. */
}

function setThemeAccent(accentName) {
  document.documentElement.style.setProperty('--theme-color', `var(--ctp-mocha-${accentName})`);
}

button {
  background-color: var(--ctp-surface-1);
  color: var(--ctp-text);
  border: 1px solid var(--ctp-overlay-0);
}

button:hover {
  background-color: var(--theme-color);
}

.text { color: var(--ctp-text); }
.subtext { color: var(--ctp-subtext-0); }
.surface { background-color: var(--ctp-surface-0); }
.panel { background-color: var(--ctp-base); }
.border { border-color: var(--ctp-overlay-1); }

------------------

/* Remapping existing UI styles to use Catppuccin Mocha variables and consolidating */

:root[data-theme='mocha'] {
  --theme-color: var(--ctp-blue); /* Default accent color */
}

body[data-theme='mocha'] {
  background-color: var(--ctp-base);
  color: var(--ctp-text);
  font-family: 'JetBrains Mono', monospace;
}

/* Remap buttons */
button,
input,
select,
textarea {
  background-color: var(--ctp-surface0);
  color: var(--ctp-text);
  border: 2px solid var(--theme-color);
  padding: 6px 12px;
  cursor: pointer;
}

button:hover {
  background-color: var(--theme-color);
  color: var(--ctp-crust);
}

/* Tabs */
.tab-container {
  background-color: var(--ctp-mantle);
}

.tab-button {
  background-color: var(--ctp-crust);
  color: var(--theme-color);
  border: 2px solid var(--theme-color);
}

.tab-button:hover {
  background-color: var(--theme-color);
  color: var(--ctp-crust);
}

.tab-content {
  background-color: var(--ctp-base);
  color: var(--ctp-text);
  border: 2px solid var(--theme-color);
  box-shadow: 0 0 10px var(--theme-color);
}

/* Forms */
.form-container {
  background-color: var(--ctp-mantle);
  border: 2px solid var(--theme-color);
  box-shadow: 0 0 15px var(--theme-color);
}

.field-container label,
input,
select,
textarea {
  color: var(--ctp-text);
  background-color: var(--ctp-crust);
  border: 2px solid var(--theme-color);
}

/* CLI Box */
.cli-box,
.cli-box textarea,
#cli-output,
#case-notes-output {
  background-color: var(--ctp-crust);
  color: var(--ctp-text);
  border: 2px solid var(--theme-color);
  box-shadow: 0 0 10px var(--theme-color);
}

/* Table */
table,
th,
td {
  border: 1px solid var(--theme-color);
  color: var(--ctp-text);
  background-color: var(--ctp-surface0);
}

/* Checkbox */
.checkbox-container,
.checkbox-wrapper {
  background-color: var(--ctp-crust);
  border: 2px solid var(--theme-color);
}

input[type="checkbox"] {
  background-color: var(--ctp-crust);
  border: 2px solid var(--theme-color);
  accent-color: var(--theme-color);
}

/* Footer */
.footer {
  color: var(--theme-color);
}

/* Intro screen */
#intro-screen {
  background-color: black;
  color: var(--theme-color);
}

#loading-text {
  border-right: 2px solid var(--theme-color);
}

/* Toggle container */
.toggle-container {
  background-color: rgba(0, 0, 0, 0.7);
  border: 2px solid var(--theme-color);
}

.toggle-label {
  color: var(--theme-color);
}

.slider {
  border: 1px solid var(--theme-color);
}

input:checked + .slider {
  background-color: var(--ctp-red);
}

/* Theme picker */
#theme-picker-container,
#custom-color {
  background-color: var(--ctp-crust);
  border: 2px solid var(--theme-color);
  color: var(--theme-color);
}

/* Readme */
#readme h2,
#readme h3,
#readme h4,
#readme p,
#readme ul li {
  color: var(--theme-color);
  text-shadow: 0 0 8px var(--theme-color);
}

/* Bug report */
.bug-report {
  color: var(--ctp-blue);
}

.bug-report:hover {
  color: white;
  text-shadow: 0 0 10px var(--theme-color);
}

.warning-icon {
  color: yellow;
  text-shadow: 0 0 8px rgba(255, 255, 0, 0.8);
}

/* Email help */
.email-help {
  color: rgba(255, 255, 255, 0.7);
}

/* Active link */
.active-link {
  color: var(--theme-color);
}

.disabled-link {
  color: gray;
  pointer-events: none;
  text-decoration: line-through;
}

/* Canvas for Matrix rain */
canvas {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  z-index: -1;
}

--------
<select id="accent-picker">
  <option value="blue">Blue</option>
  <option value="mauve">Mauve</option>
  <option value="teal">Teal</option>
  <option value="green">Green</option>
  <option value="pink">Pink</option>
  <option value="yellow">Yellow</option>
  <option value="peach">Peach</option>
  <option value="red">Red</option>
</select>

-----


const themePicker = document.getElementById("theme-picker");
const accentPicker = document.getElementById("accent-picker");

themePicker.addEventListener("change", () => {
  const selectedTheme = themePicker.value;
  document.body.setAttribute("data-theme", selectedTheme);

  if (selectedTheme === "mocha") {
    accentPicker.style.display = "inline-block";
    setThemeAccent(accentPicker.value); // default accent
  } else {
    accentPicker.style.display = "none";
  }
});

accentPicker.addEventListener("change", () => {
  setThemeAccent(accentPicker.value);
});

function setThemeAccent(accentName) {
  document.documentElement.style.setProperty('--theme-color', `var(--ctp-${accentName})`);
}

----
function setTheme(theme) {
  document.documentElement.setAttribute('data-theme', theme);

  // Set default accent if mocha is selected
  if (theme === 'mocha') {
    setThemeAccent('blue'); // or remember last used
  }
}


options
<select id="theme-picker">
  <option value="matrix">Matrix</option>
  <option value="mocha">Catppuccin Mocha</option>
  <!-- later -->
  <option value="latte">Catppuccin Latte</option>
</select>

document.getElementById('theme-picker').addEventListener('change', (e) => {
  setTheme(e.target.value);
});
