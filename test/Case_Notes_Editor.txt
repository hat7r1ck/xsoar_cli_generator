<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta name="color-scheme" content="dark">
  <title>CTFC Toolkit – Tabbed Case Notes Editor</title>
  <style>
    /* Global styles for the page */
    body {
      background-color: #1e1e2e; /* Mocha Base */
      color: #cdd6f4;           /* Mocha Text */
      font-family: 'JetBrains Mono', monospace;
      margin: 20px;
      text-align: center;
    }
    h1 {
      margin-bottom: 20px;
    }
    /* Button to open modal */
    #openNotesEditor {
      padding: 10px 15px;
      border: 2px solid #89b4fa;
      background-color: #45475a;
      color: #cdd6f4;
      border-radius: 4px;
      cursor: pointer;
      font-size: 1em;
      transition: background-color 0.3s, color 0.3s;
    }
    #openNotesEditor:hover {
      background-color: #89b4fa;
      color: #11111b;
    }
    /* Output area for case notes */
    .output-box {
      margin: 20px auto;
      padding: 10px;
      background-color: #45475a;
      border: 2px solid #89b4fa;
      border-radius: 6px;
      box-shadow: 0 0 10px #89b4fa;
      font-family: Consolas, monospace;
      white-space: pre-wrap;
      word-wrap: break-word;
      text-align: left;
      max-width: 700px;
    }

    /* ===== Scoped Modal Styles ===== */
    /* Use a unique container ID to override external CSS */
    #caseNotesModalContainer {
      position: fixed;
      top: 0;
      left: 0;
      width: 100vw;
      height: 100vh;
      background: rgba(0,0,0,0.7) !important;
      display: none !important;
      align-items: center !important;
      justify-content: center !important;
      z-index: 10000 !important;
    }
    #caseNotesModalContainer .modal {
      all: unset; /* Remove all inherited styles */
      display: block !important;
      background-color: #313244 !important; /* Surface0 */
      color: #cdd6f4 !important;
      font-family: 'JetBrains Mono', monospace !important;
      padding: 20px !important;
      border: 2px solid #89b4fa !important;
      border-radius: 6px !important;
      box-shadow: 0 0 15px #89b4fa !important;
      max-width: 600px !important;
      width: 90% !important;
      text-align: left !important;
      margin: 0 !important;
    }
    #caseNotesModalContainer .modal-header {
      display: flex !important;
      align-items: center !important;
      margin-bottom: 10px !important;
      border-bottom: 1px solid #89b4fa !important;
      padding-bottom: 5px !important;
    }
    #caseNotesModalContainer .modal-header h3 {
      margin: 0 !important;
      font-size: 1.2em !important;
    }
    #caseNotesModalContainer .modal-header button {
      all: unset;
      cursor: pointer !important;
      padding: 6px 12px !important;
      margin-right: 5px !important;
      border-bottom: 2px solid transparent !important;
      transition: border-color 0.2s !important;
      color: #cdd6f4 !important;
      font-size: 1em !important;
    }
    #caseNotesModalContainer .modal-header button:hover {
      border-color: #89b4fa !important;
    }
    #caseNotesModalContainer .modal-header button.active {
      border-color: #89b4fa !important;
    }
    #caseNotesModalContainer .close-button {
      margin-left: auto !important;
      font-size: 1.5em !important;
      color: #cdd6f4 !important;
      cursor: pointer !important;
    }
    #caseNotesModalContainer .input-row {
      margin-top: 10px !important;
      display: flex !important;
      flex-direction: column !important;
      gap: 5px !important;
    }
    #caseNotesModalContainer .input-row label {
      font-size: 0.9em !important;
      color: #bac2de !important;
    }
    #caseNotesModalContainer .input-row input {
      padding: 8px !important;
      border: 1px solid #7f849c !important;
      border-radius: 4px !important;
      background-color: #45475a !important;
      color: #cdd6f4 !important;
      box-sizing: border-box !important;
      font-family: inherit !important;
    }
    #caseNotesModalContainer .tab-content {
      margin-top: 10px !important;
    }
    #caseNotesModalContainer .tab-content textarea {
      width: 100% !important;
      height: 200px !important;
      padding: 10px !important;
      border: 1px solid #7f849c !important;
      border-radius: 4px !important;
      background-color: #45475a !important;
      color: #cdd6f4 !important;
      box-sizing: border-box !important;
      resize: vertical !important;
      font-family: inherit !important;
    }
    #caseNotesModalContainer #previewArea {
      background-color: #45475a !important;
      padding: 10px !important;
      border-radius: 4px !important;
      border: 1px solid #7f849c !important;
      max-height: 200px !important;
      overflow-y: auto !important;
      color: #cdd6f4 !important;
      font-family: Consolas, monospace !important;
      white-space: pre-wrap !important;
      word-wrap: break-word !important;
    }
    #caseNotesModalContainer .hidden {
      display: none !important;
    }
    #caseNotesModalContainer .modal-buttons {
      margin-top: 10px !important;
      display: flex !important;
      gap: 10px !important;
      justify-content: flex-end !important;
    }
    #caseNotesModalContainer .modal-buttons button {
      padding: 8px 12px !important;
      border: 2px solid #89b4fa !important;
      background-color: #45475a !important;
      color: #cdd6f4 !important;
      border-radius: 4px !important;
      cursor: pointer !important;
      transition: background-color 0.3s, color 0.3s !important;
      font-family: inherit !important;
    }
    #caseNotesModalContainer .modal-buttons button:hover {
      background-color: #89b4fa !important;
      color: #11111b !important;
    }
  </style>
</head>
<body>
  <h1>CTFC Toolkit – Tabbed Case Notes Editor</h1>
  <!-- Button to open the modal -->
  <button id="openNotesEditor">✎ Edit Notes</button>
  
  <!-- Read-only output for case notes -->
  <div class="output-box" id="caseNotesOutput">
    Case Notes will appear here...
  </div>
  
  <!-- Modal Overlay (scoped by #caseNotesModalContainer) -->
  <div id="caseNotesModalContainer" class="modal-overlay">
    <div class="modal">
      <div class="modal-header">
        <button id="editTab" class="active" onclick="switchTab('edit')">Edit</button>
        <button id="previewTab" onclick="switchTab('preview')">Preview</button>
        <button class="close-button" onclick="closeNotesEditor()">&times;</button>
      </div>
      <!-- Row for Case ID input -->
      <div class="input-row">
        <label for="caseIdInput">Case ID (e.g., 12345)</label>
        <input type="text" id="caseIdInput" placeholder="Enter Case ID (e.g., 12345)">
      </div>
      <!-- Tab contents: Edit vs Preview -->
      <div class="tab-content" id="editContent">
        <textarea id="notesEditor" placeholder="Enter or modify your case notes here..."></textarea>
      </div>
      <div class="tab-content hidden" id="previewContent">
        <div id="previewArea"></div>
      </div>
      <!-- Modal Buttons -->
      <div class="modal-buttons">
        <button onclick="saveNotes()">Save</button>
        <button onclick="copyNotes()">Copy</button>
        <button onclick="downloadNotes()">Download</button>
        <button onclick="closeNotesEditor()">Close</button>
      </div>
    </div>
  </div>

  <script>
    // DOM elements (using our scoped modal container)
    const openNotesEditorBtn = document.getElementById("openNotesEditor");
    const modalContainer = document.getElementById("caseNotesModalContainer");
    const editTabBtn = document.getElementById("editTab");
    const previewTabBtn = document.getElementById("previewTab");
    const editContent = document.getElementById("editContent");
    const previewContent = document.getElementById("previewContent");
    const previewArea = document.getElementById("previewArea");
    const notesEditor = document.getElementById("notesEditor");
    const caseIdInput = document.getElementById("caseIdInput");
    const caseNotesOutput = document.getElementById("caseNotesOutput");

    // Open modal and load current notes
    openNotesEditorBtn.addEventListener("click", () => {
      notesEditor.value = caseNotesOutput.textContent.trim();
      modalContainer.style.display = "flex";
    });

    function closeNotesEditor() {
      modalContainer.style.display = "none";
    }

    // Tab switching between Edit and Preview
    function switchTab(mode) {
      if (mode === "edit") {
        editTabBtn.classList.add("active");
        previewTabBtn.classList.remove("active");
        editContent.classList.remove("hidden");
        previewContent.classList.add("hidden");
      } else if (mode === "preview") {
        const text = notesEditor.value;
        previewArea.textContent = text;
        previewTabBtn.classList.add("active");
        editTabBtn.classList.remove("active");
        previewContent.classList.remove("hidden");
        editContent.classList.add("hidden");
      }
    }

    // Save notes: update output and close modal
    function saveNotes() {
      caseNotesOutput.textContent = notesEditor.value;
      closeNotesEditor();
    }

    // Copy notes to clipboard
    function copyNotes() {
      navigator.clipboard.writeText(notesEditor.value)
        .then(() => alert("Notes copied to clipboard!"))
        .catch(err => alert("Error copying notes: " + err));
    }

    // Download notes as a file, naming using the Case ID if provided
    function downloadNotes() {
      const notesBlob = new Blob([notesEditor.value], { type: "text/plain" });
      const downloadUrl = URL.createObjectURL(notesBlob);
      const caseId = caseIdInput.value.trim() || "untitled";
      const fileName = `case-${caseId}.txt`;
      
      const tempLink = document.createElement("a");
      tempLink.href = downloadUrl;
      tempLink.download = fileName;
      document.body.appendChild(tempLink);
      tempLink.click();
      document.body.removeChild(tempLink);
      URL.revokeObjectURL(downloadUrl);
    }
  </script>
</body>
</html>
