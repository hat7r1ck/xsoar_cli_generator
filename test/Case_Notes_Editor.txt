<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="color-scheme" content="dark" />
    <title>CTFC Toolkit – Tabbed Case Notes Editor</title>
    <style>
      /* Global styles for the page */
      body {
        background-color: #1e1e2e; /* Mocha Base */
        color: #cdd6f4; /* Mocha Text */
        font-family: "JetBrains Mono", monospace;
        margin: 20px;
        text-align: center;
      }
      h1 {
        margin-bottom: 20px;
      }
      /* Button to open the modal */
      /* Modal Overlay (full-screen cover) */
      #notesModalOverlay.modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0, 0, 0, 0.6); /* semi-transparent black backdrop */
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 9999;
      }
      /* Initially hidden */
      #notesModalOverlay.hidden {
        display: none;
      }

      /* Modal Content Box */
      #notesModalOverlay .modal-content {
        background: #1e1e2e;
        color: #cdd6f4;
        border: 2px solid #89b4fa;
        border-radius: 8px;
        width: 90%;
        max-width: 600px;
        max-height: 80vh;
        overflow: auto;
        box-shadow: 0 0 10px #000;
        font-family: sans-serif;
      }

      /* Modal Header */
      #notesModalOverlay .modal-header {
        padding: 0.5em 1em;
        border-bottom: 1px solid #89b4fa; /* blue accent separator line */
      }
      #notesModalOverlay .tabs {
        display: flex;
      }
      #notesModalOverlay .tabs .tab {
        flex: 1;
        background: none;
        border: none;
        color: #cdd6f4;
        font-weight: bold;
        padding: 0.5em;
        cursor: pointer;
        text-align: center;
        border-bottom: 2px solid transparent;
      }
      #notesModalOverlay .tabs .tab.active {
        color: #89b4fa;
        border-bottom-color: #89b4fa; /* underline active tab in blue */
      }
      #notesModalOverlay .tabs .tab:hover {
        background: #313244;
      }

      /* Modal Body */
      #notesModalOverlay .modal-body {
        padding: 1em;
      }
      #notesModalOverlay .modal-body label {
        display: block;
        margin: 0.5em 0;
        color: #bac2de;
      }
      #notesModalOverlay .modal-body input[type="text"],
      #notesModalOverlay .modal-body textarea {
        width: 100%;
        background: #313244;
        color: #cdd6f4;
        border: 1px solid #45475a; /* Surface1 border */
        border-radius: 4px;
        padding: 0.5em;
        box-sizing: border-box;
        font: inherit;
      }
      #notesModalOverlay .modal-body input:focus,
      #notesModalOverlay .modal-body textarea:focus {
        outline: 2px solid #89b4fa; /* blue focus outline */
      }

      #notesModalOverlay .preview-view {
        text-align: left;
      }

      #notesModalOverlay .preview-view p {
        margin: 0.5em 0;
      }
      #notesModalOverlay .preview-view h1,
      #notesModalOverlay .preview-view h2,
      #notesModalOverlay .preview-view h3 {
        color: #89b4fa;
      }
      #notesModalOverlay .preview-view strong {
        color: #cdd6f4;
      }
      #notesModalOverlay .preview-view em {
        color: #f5c2e7; /* Pink for italic emphasis (optional) */
      }
      #notesModalOverlay .preview-view code {
        background: #45475a;
        padding: 2px 4px;
        border-radius: 4px;
        font-family: monospace;
        color: #f9e2af; /* Yellow text for code */
      }

      /* Modal Footer */
      #notesModalOverlay .modal-footer {
        padding: 0.5em 1em;
        border-top: 1px solid #89b4fa;
        text-align: right;
      }
      #notesModalOverlay .modal-footer button {
        background: #585b70; /* Surface2 button background */
        color: #cdd6f4;
        border: 1px solid #89b4fa;
        border-radius: 4px;
        padding: 0.3em 0.6em;
        margin-left: 0.5em;
        cursor: pointer;
      }
      #notesModalOverlay .modal-footer button:hover {
        background: #6943ff33; /* slight change on hover (using a semi-transparent accent) */
      }
      #notesModalOverlay .modal-footer button:active {
        background: #89b4fa;
        color: #1e1e2e;
      }

      /* Read-only output display (on main page) */
      .output-display {
        margin-top: 1em;
        padding: 0.5em;
        background: #1e1e2e;
        color: #cdd6f4;
        border: 1px solid #89b4fa;
        border-radius: 4px;
        white-space: pre-wrap; /* preserve formatting and line breaks */
      }
    </style>
  </head>
  <body>
    <h1>CTFC Toolkit – Tabbed Case Notes Editor</h1>
    <!-- Button to open the modal -->
    <!-- Trigger button -->
    <button id="editNotesBtn">✎ Edit Notes</button>

    <!-- Read-only output area (display saved notes) -->
    <div id="caseOutput" class="output-display"></div>

    <!-- Modal Overlay and Content -->
    <div id="notesModalOverlay" class="modal-overlay hidden">
      <div class="modal-content">
        <!-- Modal Header with Tabs -->
        <div class="modal-header">
          <div class="tabs">
            <button type="button" class="tab active" data-tab="edit">
              Edit
            </button>
            <button type="button" class="tab" data-tab="preview">
              Preview
            </button>
          </div>
        </div>

        <!-- Modal Body -->
        <div class="modal-body">
          <!-- Edit View (visible by default) -->
          <div class="edit-view">
            <label
              >Case ID:
              <input type="text" id="caseIdInput" />
            </label>
            <label
              >Case Notes:
              <textarea id="notesTextarea"></textarea>
            </label>
          </div>
          <!-- Preview View (hidden by default) -->
          <div class="preview-view" style="display: none">
            <p><strong>Case ID:</strong> <span id="caseIdDisplay"></span></p>
            <div id="notesPreviewContent"></div>
          </div>
        </div>

        <!-- Modal Footer with action buttons -->
        <div class="modal-footer">
          <button type="button" id="saveBtn">Save</button>
          <button type="button" id="copyBtn">Copy</button>
          <button type="button" id="downloadBtn">Download</button>
          <button type="button" id="closeBtn">Close</button>
        </div>
      </div>
    </div>

    <script>
      // Elements
      const editBtn = document.getElementById("editNotesBtn");
      const overlay = document.getElementById("notesModalOverlay");
      const caseIdInput = document.getElementById("caseIdInput");
      const notesTA = document.getElementById("notesTextarea");
      const caseIdDisp = document.getElementById("caseIdDisplay");
      const previewDiv = document.getElementById("notesPreviewContent");
      const outputDiv = document.getElementById("caseOutput");
      const tabButtons = document.querySelectorAll("#notesModalOverlay .tab");
      const saveBtn = document.getElementById("saveBtn");
      const copyBtn = document.getElementById("copyBtn");
      const downloadBtn = document.getElementById("downloadBtn");
      const closeBtn = document.getElementById("closeBtn");

      // Function: open modal
      editBtn.addEventListener("click", () => {
        overlay.classList.remove("hidden"); // show modal
        caseIdInput.focus(); // focus Case ID field for convenience
      });

      // Function: close modal
      function closeModal() {
        overlay.classList.add("hidden");
      }
      closeBtn.addEventListener("click", closeModal);

      // Function: switch to Edit or Preview tab
      tabButtons.forEach((tab) => {
        tab.addEventListener("click", () => {
          const target = tab.getAttribute("data-tab"); // "edit" or "preview"
          // Toggle active tab styling
          tabButtons.forEach((t) => t.classList.toggle("active", t === tab));
          // Toggle visible view
          if (target === "edit") {
            document.querySelector(".edit-view").style.display = "block";
            document.querySelector(".preview-view").style.display = "none";
          } else if (target === "preview") {
            // When switching to Preview, generate the formatted output
            generatePreview();
            document.querySelector(".edit-view").style.display = "none";
            document.querySelector(".preview-view").style.display = "block";
          }
        });
      });

      // Function: generate preview HTML from markdown text
      function generatePreview() {
        const rawText = notesTA.value;
        const caseId = caseIdInput.value.trim();
        caseIdDisp.textContent = caseId || "(none)"; // display Case ID or placeholder

        // Basic Markdown conversions using regex:
        let html = rawText
          // Escape HTML special chars first to prevent injection
          .replace(/&/g, "&amp;")
          .replace(/</g, "&lt;")
          .replace(/>/g, "&gt;")
          // Headings: #, ##, ### (supports H1-H3 for demo purposes)
          .replace(/^### (.*$)/gim, "<h3>$1</h3>")
          .replace(/^## (.*$)/gim, "<h2>$1</h2>")
          .replace(/^# (.*$)/gim, "<h1>$1</h1>")
          // Bold: **text** or __text__
          .replace(/\*\*(.*?)\*\*/g, "<strong>$1</strong>")
          .replace(/__(.*?)__/g, "<strong>$1</strong>")
          // Italic: *text* or _text_
          .replace(/\*(.*?)\*/g, "<em>$1</em>")
          .replace(/_(.*?)_/g, "<em>$1</em>")
          // Inline code: `code`
          .replace(/`([^`]+)`/g, "<code>$1</code>")
          // Line breaks: replace newline with <br> (simple approach)
          .replace(/\n/g, "<br/>");

        previewDiv.innerHTML = html;
      }

      // Save button: update output div and close modal
      saveBtn.addEventListener("click", () => {
        // Ensure preview is up-to-date (in case Save clicked while in Edit mode)
        generatePreview();
        // Combine Case ID and notes for output display
        const caseId = caseIdInput.value.trim();
        outputDiv.innerHTML =
          `<p><strong>Case ID:</strong> ${caseId || "(none)"}</p>` +
          previewDiv.innerHTML;
        closeModal();
      });

      saveBtn.addEventListener("click", () => {
        // Update preview first (if needed)
        generatePreview();
        const caseId = caseIdInput.value.trim();
        const outputHTML =
          `<p><strong>Case ID:</strong> ${caseId || "(none)"}</p>` +
          previewDiv.innerHTML;

        // Update the output tab's content
        document.getElementById("notesOutputTab").innerHTML = outputHTML;

        // Optionally, switch to the output tab
        switchTab("notesOutputTab");

        // If using a modal, close it after saving
        closeModal();
      });

      // Copy button: copy raw markdown text to clipboard
      copyBtn.addEventListener("click", () => {
        const textToCopy = notesTA.value;
        navigator.clipboard
          .writeText(textToCopy)
          .then(() => {
            console.log("Notes copied to clipboard"); // success (could show a toast instead)
          })
          .catch((err) => {
            console.error("Clipboard copy failed: ", err);
          });
      });

      // Download button: save notes to file named after Case ID
      downloadBtn.addEventListener("click", () => {
        const caseId = caseIdInput.value.trim() || "notes";
        // Prepare file content: include Case ID and raw notes
        const fileContent = "Case ID: " + caseId + "\n\n" + notesTA.value;
        const blob = new Blob([fileContent], { type: "text/plain" });
        const url = URL.createObjectURL(blob);
        const a = document.createElement("a");
        a.href = url;
        a.download = caseId + ".txt"; // use Case ID as filename
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
      });
    document.getElementById("notesModalOverlay").addEventListener("click", function(e) {
      if (e.target === this) {
        this.classList.add("hidden");
      }
    });
    </script>
  </body>
</html>
