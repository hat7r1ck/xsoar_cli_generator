<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Case Notes Editor</title>
  <meta name="color-scheme" content="dark">
  <style>
    /* Base Theme (Catppuccin Mocha example) */
    body {
      background-color: #1e1e2e;  /* Catppuccin Mocha Base */
      color: #cdd6f4;            /* Catppuccin Mocha Text */
      font-family: 'JetBrains Mono', monospace;
      margin: 20px;
      text-align: center;
    }
    .header-container {
      display: flex;
      justify-content: center;
      align-items: center;
      gap: 20px;
      margin-bottom: 20px;
    }
    .tab-button, .menu-button, .notes-button {
      padding: 10px 15px;
      background-color: #45475a; /* e.g., Surface1 */
      color: #cdd6f4;
      border: 2px solid #89b4fa;  /* e.g., Theme Accent */
      border-radius: 4px;
      cursor: pointer;
      transition: background-color 0.3s, color 0.3s;
    }
    .tab-button:hover, .menu-button:hover, .notes-button:hover {
      background-color: #89b4fa;
      color: #11111b; /* e.g., Crust */
    }
    .output-box {
      margin: 20px auto;
      padding: 10px;
      max-width: 700px;
      background-color: #45475a;
      border: 2px solid #89b4fa;
      border-radius: 6px;
      box-shadow: 0 0 10px #89b4fa;
      font-family: Consolas, monospace;
      white-space: pre-wrap;
      word-wrap: break-word;
      text-align: left;
    }
    /* Modal Overlay for the Notes Editor */
    .modal-overlay {
      position: fixed;
      top: 0;
      left: 0;
      width: 100vw;
      height: 100vh;
      background: rgba(0, 0, 0, 0.7);
      display: none; /* Hidden by default */
      align-items: center;
      justify-content: center;
      z-index: 1000;
    }
    .modal {
      background-color: #313244; /* e.g., Surface0 */
      padding: 20px;
      border: 2px solid #89b4fa;
      border-radius: 6px;
      max-width: 600px;
      width: 90%;
      box-shadow: 0 0 15px #89b4fa;
      text-align: left;
    }
    /* Modal Header for Tab Toggle */
    .modal-header {
      display: flex;
      justify-content: space-around;
      margin-bottom: 10px;
    }
    .modal-header button {
      flex: 1;
      padding: 8px;
      background-color: #45475a;
      color: #cdd6f4;
      border: none;
      cursor: pointer;
      transition: background-color 0.3s, color 0.3s;
    }
    .modal-header button.active {
      background-color: #89b4fa;
      color: #11111b;
    }
    /* Input group for Case ID */
    .modal .input-group {
      margin-bottom: 10px;
    }
    .modal .input-group label {
      display: block;
      margin-bottom: 3px;
      font-size: 0.9em;
      font-weight: bold;
    }
    .modal .input-group input {
      width: 100%;
      padding: 6px;
      border: 1px solid #7f849c;
      border-radius: 4px;
      background-color: #45475a;
      color: #cdd6f4;
      box-sizing: border-box;
    }
    /* Modal Content Areas */
    .modal-content {
      display: none;
    }
    .modal-content.active {
      display: block;
    }
    .modal textarea {
      width: 100%;
      height: 300px;
      padding: 10px;
      border: 1px solid #7f849c;
      border-radius: 4px;
      background-color: #45475a;
      color: #cdd6f4;
      font-family: 'JetBrains Mono', monospace;
      box-sizing: border-box;
      resize: vertical;
    }
    /* Modal Buttons */
    .modal .modal-buttons {
      margin-top: 10px;
      display: flex;
      gap: 10px;
      justify-content: flex-end;
    }
    .modal .modal-buttons button {
      padding: 8px 12px;
      background-color: #45475a;
      color: #cdd6f4;
      border: 2px solid #89b4fa;
      border-radius: 4px;
      cursor: pointer;
      transition: background-color 0.3s, color 0.3s;
    }
    .modal .modal-buttons button:hover {
      background-color: #89b4fa;
      color: #11111b;
    }
  </style>
</head>
<body>
  <!-- Header with Tabs and a Notes (pencil) Button -->
  <div class="header-container">
    <button class="tab-button">Cases</button>
    <button class="tab-button">Links</button>
    <button class="menu-button">☰</button>
    <button class="notes-button" id="openNotesEditor">✎ Edit Notes</button>
  </div>
  
  <!-- Output area for saved notes (read-only) -->
  <div class="output-box" id="caseNotesOutput">
    Your saved notes will appear here...
  </div>
  
  <!-- Modal Overlay for Notes Editor with Tab Toggle -->
  <div class="modal-overlay" id="notesModal">
    <div class="modal">
      <div class="modal-header">
        <button id="editTab" class="active">Edit</button>
        <button id="previewTab">Preview</button>
      </div>
      
      <!-- Case ID input -->
      <div class="input-group">
        <label for="caseIdInput">Case ID:</label>
        <input type="text" id="caseIdInput" placeholder="Enter Case ID (e.g., 12345)">
      </div>
      
      <!-- Edit Mode: Textarea -->
      <div id="editContent" class="modal-content active">
        <textarea id="notesEditor" placeholder="Enter or modify your case notes here..."></textarea>
      </div>
      
      <!-- Preview Mode: Rendered Markdown -->
      <div id="previewContent" class="modal-content">
        <div id="previewArea" style="background-color:#45475a; padding:10px; border-radius:4px; max-height:300px; overflow:auto;"></div>
      </div>
      
      <!-- Modal Buttons -->
      <div class="modal-buttons">
        <button onclick="saveNotes()">Save</button>
        <button onclick="copyNotes()">Copy</button>
        <button onclick="downloadNotes()">Download</button>
        <button onclick="closeNotesEditor()">Close</button>
      </div>
    </div>
  </div>
  
  <script>
    let caseNotes = "";

    const openNotesEditorBtn = document.getElementById("openNotesEditor");
    const notesModal = document.getElementById("notesModal");
    const notesEditor = document.getElementById("notesEditor");
    const caseNotesOutput = document.getElementById("caseNotesOutput");
    const editTab = document.getElementById("editTab");
    const previewTab = document.getElementById("previewTab");
    const editContent = document.getElementById("editContent");
    const previewContent = document.getElementById("previewContent");
    const previewArea = document.getElementById("previewArea");
    const caseIdInput = document.getElementById("caseIdInput");

    // Open modal in Edit mode
    openNotesEditorBtn.addEventListener("click", () => {
      notesEditor.value = caseNotes;
      notesModal.style.display = "flex";
      switchTab("edit");
    });

    function closeNotesEditor() {
      notesModal.style.display = "none";
    }

    function switchTab(mode) {
      if (mode === "edit") {
        editTab.classList.add("active");
        previewTab.classList.remove("active");
        editContent.classList.add("active");
        previewContent.classList.remove("active");
      } else if (mode === "preview") {
        // Update notes and render preview
        caseNotes = notesEditor.value;
        previewArea.innerHTML = renderMarkdown(caseNotes);
        previewTab.classList.add("active");
        editTab.classList.remove("active");
        previewContent.classList.add("active");
        editContent.classList.remove("active");
      }
    }

    previewTab.addEventListener("click", () => switchTab("preview"));
    editTab.addEventListener("click", () => switchTab("edit"));

    function saveNotes() {
      caseNotes = notesEditor.value;
      caseNotesOutput.textContent = caseNotes;
      alert("Notes saved.");
    }

    function copyNotes() {
      navigator.clipboard.writeText(caseNotes)
        .then(() => alert("Copied to clipboard!"))
        .catch(err => alert("Copy failed: " + err));
    }

    function downloadNotes() {
      const caseId = caseIdInput.value.trim() || "unknown";
      const filename = `case-#${caseId}.md`;
      const blob = new Blob([notesEditor.value], { type: 'text/markdown' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement("a");
      a.href = url;
      a.download = filename;
      a.click();
      URL.revokeObjectURL(url);
    }

    function renderMarkdown(markdown) {
      let html = `<p style="color:#f9e2af; font-style: italic; margin-bottom:1em;">
        Warning: This preview is temporary and not persistently saved.
      </p>` + markdown;
      
      // Fenced code blocks
      html = html.replace(/```([\s\S]*?)```/g, (match, p1) => `<pre><code>${p1.trim()}</code></pre>`);
      // Inline code
      html = html.replace(/`([^`]+)`/g, '<code>$1</code>');
      
      // Headers (levels 6 to 1)
      html = html.replace(/^###### (.*)$/gm, '<h6>$1</h6>');
      html = html.replace(/^##### (.*)$/gm, '<h5>$1</h5>');
      html = html.replace(/^#### (.*)$/gm, '<h4>$1</h4>');
      html = html.replace(/^### (.*)$/gm, '<h3>$1</h3>');
      html = html.replace(/^## (.*)$/gm, '<h2>$1</h2>');
      html = html.replace(/^# (.*)$/gm, '<h1>$1</h1>');
      
      // Bold, Italic, and Strikethrough
      html = html.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>');
      html = html.replace(/\*(.*?)\*/g, '<em>$1</em>');
      html = html.replace(/~~(.*?)~~/g, '<del>$1</del>');
      
      // Links
      html = html.replace(/\$begin:math:display\$([^\$end:math:display\$]+)\]\$begin:math:text\$(https?:\/\/[^\$end:math:text\$]+)\)/g, '<a href="$2" target="_blank">$1</a>');
      
      // Horizontal rules
      html = html.replace(/^(---|\*\*\*|___)$/gm, '<hr>');
      
      // Blockquotes
      html = html.replace(/^> (.*)$/gm, '<blockquote>$1</blockquote>');
      
      // Unordered lists
      html = html.replace(/^\s*[\-\+\*] (.*)$/gm, '<li>$1</li>');
      html = html.replace(/(<li>[\s\S]+?<\/li>)/g, '<ul>$1</ul>');
      
      // Ordered lists
      html = html.replace(/^\s*\d+\.\s+(.*)$/gm, '<li>$1</li>');
      html = html.replace(/(<li>[\s\S]+?<\/li>)/g, '<ol>$1</ol>');
      
      // Convert newlines to <br>
      html = html.replace(/\n/g, '<br>');
      
      return html;
    }
  </script>
</body>
</html>
